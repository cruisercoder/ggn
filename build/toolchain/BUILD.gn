ar = "ar"
cc = "gcc"
cxx = "g++"
ld = "g++"

toolchain("gcc") {
  lib_switch = "-l"
  lib_dir_switch = "-L"
  object_subdir = "{{target_out_dir}}/{{label_name}}"

  tool("cc") {
    outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    depfile = "{{output}}.d"
    command = "$cc -o {{output}} -MMD -MF $depfile {{cflags}} {{cflags_c}} {{defines}} {{include_dirs}} -c {{source}}"
    depsformat = "gcc"
    description = "CC {{output}}"
  }

  tool("cxx") {
    outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    depfile = "{{output}}.d"
    command = "$cxx -o {{output}} -MMD -MF $depfile {{cflags}} {{cflags_cc}} {{defines}} {{include_dirs}} -c {{source}}"
    depsformat = "gcc"
    description = "CXX {{output}}"
  }

  tool("asm") {
    # For GCC we can just use the C compiler to compile assembly.
    depfile = "{{output}}.d"
    command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
    depsformat = "gcc"
    description = "ASM {{output}}"
    outputs =
        [ "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.o" ]
  }

  tool("link") {
    outputs =
        [ "{{root_out_dir}}/bin/{{target_output_name}}{{output_extension}}" ]
    if (use_linker_group) {
      command = "$ld -o {{output}} {{ldflags}} {{inputs}} {{solibs}} -Wl,--start-group {{libs}} -Wl,--end-group"
    } else {
      command = "$ld -o {{output}} {{ldflags}} {{inputs}} {{solibs}} {{libs}}"
    }
    description = "LINK {{output}}"
  }

  tool("solink") {
    #outputs = ["bin/{{target_output_name}}{{output_extension}}"]
    outputs = [ "{{target_output_name}}{{output_extension}}" ]

    command = "$ld -o {{output}} -shared -fPIC {{ldflags}} {{inputs}} {{solibs}} {{libs}}"
    description = "SOLINK {{output}}"
    default_output_extension = ".so"

    #depend_output = sofile
  }

  tool("alink") {
    command = "rm -f {{output}} && $ar rcs {{output}} {{inputs}}"
    description = "AR {{output}}"
    outputs =
        [ "{{target_out_dir}}/{{target_output_name}}{{output_extension}}" ]
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("stamp") {
    command = "touch {{output}}"
    description = "STAMP {{output}}"
  }

  tool("copy") {
    command = "ln -f {{source}} {{output}} 2>/dev/null || (rm -rf {{output}} && cp -af {{source}} {{output}})"
    description = "COPY {{source}} {{output}}"
  }
}
